using AuthService.Data;
using AuthService.Models;
using Microsoft.EntityFrameworkCore;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;

namespace AuthService.Services;

public class StudentAuthService : IStudentAuthService
{
    private readonly AppDbContext _context;
    private readonly ITokenService _tokenService;

    public StudentAuthService(AppDbContext context, ITokenService tokenService)
    {
        _context = context;
        _tokenService = tokenService;
    }

    public async Task<AuthResponse> LoginAsync(StudentLoginRequest request)
    {
        // First validate the device
        var device = await _context.Devices.FirstOrDefaultAsync(d => d.DeviceId == request.DeviceId);
        if (device == null)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Device not found or not registered"
            };
        }
        
        // Get the school ID from the device
        int schoolId = device.SchoolId;
        
        // Check if there's an active session
        var currentTime = DateTime.UtcNow;
        var session = await _context.Sessions.FirstOrDefaultAsync(s => 
            s.SchoolId == schoolId && 
            s.Standard == request.Standard && 
            s.ClassName == request.ClassName && 
            s.StartTime <= currentTime && 
            s.EndTime >= currentTime);

        if (session == null)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "No active session found for your class at this time"
            };
        }
        
        // Find the student
        var student = await _context.Students.FirstOrDefaultAsync(s => 
            s.SchoolId == schoolId &&
            s.RollNumber.ToString() == request.RollNo &&
            s.Standard == request.Standard &&
            s.ClassName == request.ClassName &&
            s.DateOfBirth == request.DOB);

        if (student == null)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Student not found or credentials incorrect"
            };
        }
        
        // Generate JWT token
        var tokenId = Guid.NewGuid().ToString();
        var claims = new[]
        {
            new Claim(JwtRegisteredClaimNames.Sub, student.StudentId.ToString()),
            new Claim(JwtRegisteredClaimNames.Jti, tokenId),
            new Claim(ClaimTypes.Name, $"{student.FirstName} {student.LastName}"),
            new Claim(ClaimTypes.Role, "Student"),
            new Claim("SchoolId", student.SchoolId.ToString()),
            new Claim("Standard", student.Standard),
            new Claim("ClassName", student.ClassName ?? ""),
            new Claim("RollNumber", student.RollNumber.ToString())
        };
        
        var token = _tokenService.GenerateJwtToken(claims);
        var refreshToken = _tokenService.GenerateRefreshToken(tokenId, student.StudentId.ToString(), "Student");
        
        // Save refresh token to database
        _context.RefreshTokens.Add(refreshToken);
        await _context.SaveChangesAsync();
        
        return new AuthResponse
        {
            Success = true,
            Message = "Login successful",
            Token = token,
            RefreshToken = refreshToken.Token,
            Expiration = DateTime.UtcNow.AddHours(1),
            User = new UserDetails
            {
                Id = student.StudentId,
                Name = $"{student.FirstName} {student.LastName}",
                Role = "Student",
                AdditionalInfo = new Dictionary<string, object>
                {
                    { "Standard", student.Standard },
                    { "ClassName", student.ClassName ?? "" },
                    { "RollNumber", student.RollNumber }
                }
            }
        };
    }

    public async Task<AuthResponse> RefreshTokenAsync(RefreshTokenRequest request)
    {
        var principal = _tokenService.GetPrincipalFromToken(request.Token);
        if (principal == null)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Invalid token"
            };
        }
        
        var jti = principal.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Jti)?.Value;
        var userId = principal.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Sub)?.Value;
        
        if (string.IsNullOrEmpty(jti) || string.IsNullOrEmpty(userId))
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Invalid token"
            };
        }
        
        var isRefreshTokenValid = await _tokenService.ValidateRefreshTokenAsync(request.RefreshToken, jti, userId, "Student");
        if (!isRefreshTokenValid)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Invalid refresh token"
            };
        }
        
        var student = await _context.Students.FindAsync(int.Parse(userId));
        if (student == null)
        {
            return new AuthResponse
            {
                Success = false,
                Message = "Student not found"
            };
        }
        
        // Generate new tokens
        var newTokenId = Guid.NewGuid().ToString();
        var claims = principal.Claims.Where(c => c.Type != JwtRegisteredClaimNames.Jti)
            .Append(new Claim(JwtRegisteredClaimNames.Jti, newTokenId));
        
        var newToken = _tokenService.GenerateJwtToken(claims);
        var newRefreshToken = _tokenService.GenerateRefreshToken(newTokenId, userId, "Student");
        
        // Save new refresh token
        _context.RefreshTokens.Add(newRefreshToken);
        await _context.SaveChangesAsync();
        
        return new AuthResponse
        {
            Success = true,
            Message = "Token refreshed successfully",
            Token = newToken,
            RefreshToken = newRefreshToken.Token,
            Expiration = DateTime.UtcNow.AddHours(1),
            User = new UserDetails
            {
                Id = student.StudentId,
                Name = $"{student.FirstName} {student.LastName}",
                Role = "Student",
                AdditionalInfo = new Dictionary<string, object>
                {
                    { "Standard", student.Standard },
                    { "ClassName", student.ClassName ?? "" },
                    { "RollNumber", student.RollNumber }
                }
            }
        };
    }

    public async Task<bool> LogoutAsync(string token)
    {
        await _tokenService.InvalidateRefreshTokenAsync(token);
        return true;
    }
}